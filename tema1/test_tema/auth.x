/*
    status_code = stores the status after an operation has been finished;
        used to determine success/failure or other outcome;
*/
enum status_code {
    S_UNKNOWN = 0,
    S_SUCCESS = 4,
    S_USER_NOT_FOUND = 8,
    S_REQUEST_DENIED = 16,
    S_PERMISSION_DENIED = 17,
    S_TOKEN_EXPIRED = 18,
    S_RESOURCE_NOT_FOUND = 19,
    S_OPERATION_NOT_PERMITTED = 20,
    S_PERMISSION_GRANTED = 21
};

/*
    Operation = encoding of an operation done by the client on a resource;
        the values must be powers of 2; you need to be able to bitwise OR them
        without loosing information;
        
*/
enum Operation {
    REQUEST = 2,
    READ = 4,
    INSERT = 8,
    MODIFY = 16,
    DELETE = 32,
    EXECUTE = 64,
    /* Special operation code to handle unmatched operations */
    INTERCONTINENTAL_BALLISTIC_MISSILE = 128
};


/*
    auth_output = the output of the REQUESTAUTH procedure
        - status = the outcome after the action
        - auth_token = a unique token generated by the server from a user id
        
*/
struct auth_output {
    status_code status;
    char auth_token[16];
};

/*
    access_input = the input of the REQUESTACCESS procedure
        - id = the id of a user; it has 15 characters; the last character must
            be '\0'
        - auth_token = a token generated by the server from a user id
        - permissions = a string that signifies the permissions for some resources;
            format: <Resource>,<Permissions>,<Resource>,<Permissions>,...
            must be null terminated
        - signature = a byte array that proves that the auth_token and
            permissions belong to the respective user; it can be verified by
            the server
        - regen = if different than 0, it means the client also wants a refresh
            token; if 0, the server won't generate the refresh token
        
*/
struct access_input {
    char id[16];
    char auth_token[16];
    string permissions<>;
    unsigned char signature[64];
    int regen;
};

/*
    access_output = the output of the REQUESTACCESS procedure
        - status = the outcome after the action
        - id = the id of a user; it has 15 characters; the last character must
            be '\0'
        - access_token = a token generated by the server that can be used
            to access some resources on behalf of a user
        - regen_token = a token generated by the server that can be used
            to get a new access token
        - life = the number of uses for an access token
        
*/
struct access_output {
    status_code status;
    char access_token[16];
    char regen_token[16];
    int life;
};

/*
    approve_input = the input of the APPROVETOKEN procedure
        - id = the id of a user; it has 15 characters; the last character must
            be '\0'
        - auth_token = a token generated by the server from a user id
        
*/
struct approve_input {
    char id[16];
    char auth_token[16];
};

/*
    approve_output = the output of the APPROVETOKEN procedure
        - status = the outcome after the action
        - auth_token = a token generated by the server from a user id
        - permissions = a string that signifies the permissions for some resources;
            format: <Resource>,<Permissions>,<Resource>,<Permissions>,...
            must be null terminated
        - signature = a byte array that proves that the auth_token and
            permissions belong to the respective user; it can be verified by
            the server
*/
struct approve_output {
    status_code status;
    char auth_token[16];
    string permissions<>;
    unsigned char signature[64];
};

/*
    validate_input = the input of the VALIDATEACTION procedure
        - operation = the operation to be done on the resource by the client`
        - access_token = a token generated by the server that can be used
            to access some resources on behalf of a user
        - resource = the name of the file/resource to be accessed
*/
struct validate_input {
    Operation operation;
    char access_token[16];
    string resource<>;
};

program REQUESTAUTH_PROG {
	version REQUESTAUTH_VERS {
        /* Called by the client first time, to request an authentication
            token from the server.
        */
		auth_output REQUESTAUTH(string <16>) = 1;
        /* Called by the client to request the access token,
            after the user has approved it 
        */
		access_output REQUESTACCESS(access_input) = 2;
        /* Called by the client to request the user permissions.
            The user can approve or reject the request.
        */
		approve_output APPROVETOKEN(approve_input) = 3;
        /* Called by the client to make an operation. The server checks
            if the client has the right of doing the operations, by looking
            at the access token.
        */
		status_code VALIDATEACTION(validate_input) = 4;
	} = 1;
} = 0x31234077;
